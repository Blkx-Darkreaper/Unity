//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Game/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Fishing"",
            ""id"": ""b278f389-9591-46d2-b17b-bb1e3fdb875d"",
            ""actions"": [
                {
                    ""name"": ""Line Brake"",
                    ""type"": ""Value"",
                    ""id"": ""ef6c1e1e-87cc-4dfe-ae41-b024982a59e7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rodtip Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d6028bef-4b40-4603-8f46-0a36f1139398"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reel Movement"",
                    ""type"": ""Value"",
                    ""id"": ""261a4465-cb85-447c-917c-bae13d30af80"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""13bf6828-42ae-4280-bf81-f46e120ef861"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05c5b771-ca67-4d5c-9a20-c69f4cf1e937"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rodtip Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdc35654-d1dd-4704-b1fb-cd78b3aa53bc"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reel Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""a09482a0-3aa1-4f11-b99c-df8e0e3f6c4a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0872290c-1660-48d3-a79b-d03624a45e98"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ee83a564-26f7-41d0-bd47-ba893f1725b0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f561333-0d61-478f-bcc1-d29103722e4f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36315a16-013a-486c-b336-84d65a5babf1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debugging"",
            ""id"": ""6eb3327b-1126-4df3-b8e3-033dbe0d50ef"",
            ""actions"": [
                {
                    ""name"": ""Select Object"",
                    ""type"": ""Button"",
                    ""id"": ""9f2fd4a7-9c74-44dd-9357-aca42ed67b12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""5a0dd239-fc6b-4e4d-9968-dd2b346bd36d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79f1090e-f21d-47c6-a31c-c2c547b1c286"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Object"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e955236-0fd7-491f-bee6-c035a0d493e7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Fishing
        m_Fishing = asset.FindActionMap("Fishing", throwIfNotFound: true);
        m_Fishing_LineBrake = m_Fishing.FindAction("Line Brake", throwIfNotFound: true);
        m_Fishing_RodtipMovement = m_Fishing.FindAction("Rodtip Movement", throwIfNotFound: true);
        m_Fishing_ReelMovement = m_Fishing.FindAction("Reel Movement", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Rotation = m_Player.FindAction("Rotation", throwIfNotFound: true);
        // Debugging
        m_Debugging = asset.FindActionMap("Debugging", throwIfNotFound: true);
        m_Debugging_SelectObject = m_Debugging.FindAction("Select Object", throwIfNotFound: true);
        m_Debugging_MoveMouse = m_Debugging.FindAction("Move Mouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Fishing
    private readonly InputActionMap m_Fishing;
    private IFishingActions m_FishingActionsCallbackInterface;
    private readonly InputAction m_Fishing_LineBrake;
    private readonly InputAction m_Fishing_RodtipMovement;
    private readonly InputAction m_Fishing_ReelMovement;
    public struct FishingActions
    {
        private @PlayerControls m_Wrapper;
        public FishingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LineBrake => m_Wrapper.m_Fishing_LineBrake;
        public InputAction @RodtipMovement => m_Wrapper.m_Fishing_RodtipMovement;
        public InputAction @ReelMovement => m_Wrapper.m_Fishing_ReelMovement;
        public InputActionMap Get() { return m_Wrapper.m_Fishing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FishingActions set) { return set.Get(); }
        public void SetCallbacks(IFishingActions instance)
        {
            if (m_Wrapper.m_FishingActionsCallbackInterface != null)
            {
                @LineBrake.started -= m_Wrapper.m_FishingActionsCallbackInterface.OnLineBrake;
                @LineBrake.performed -= m_Wrapper.m_FishingActionsCallbackInterface.OnLineBrake;
                @LineBrake.canceled -= m_Wrapper.m_FishingActionsCallbackInterface.OnLineBrake;
                @RodtipMovement.started -= m_Wrapper.m_FishingActionsCallbackInterface.OnRodtipMovement;
                @RodtipMovement.performed -= m_Wrapper.m_FishingActionsCallbackInterface.OnRodtipMovement;
                @RodtipMovement.canceled -= m_Wrapper.m_FishingActionsCallbackInterface.OnRodtipMovement;
                @ReelMovement.started -= m_Wrapper.m_FishingActionsCallbackInterface.OnReelMovement;
                @ReelMovement.performed -= m_Wrapper.m_FishingActionsCallbackInterface.OnReelMovement;
                @ReelMovement.canceled -= m_Wrapper.m_FishingActionsCallbackInterface.OnReelMovement;
            }
            m_Wrapper.m_FishingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LineBrake.started += instance.OnLineBrake;
                @LineBrake.performed += instance.OnLineBrake;
                @LineBrake.canceled += instance.OnLineBrake;
                @RodtipMovement.started += instance.OnRodtipMovement;
                @RodtipMovement.performed += instance.OnRodtipMovement;
                @RodtipMovement.canceled += instance.OnRodtipMovement;
                @ReelMovement.started += instance.OnReelMovement;
                @ReelMovement.performed += instance.OnReelMovement;
                @ReelMovement.canceled += instance.OnReelMovement;
            }
        }
    }
    public FishingActions @Fishing => new FishingActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Rotation;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Rotation => m_Wrapper.m_Player_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Rotation.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Debugging
    private readonly InputActionMap m_Debugging;
    private IDebuggingActions m_DebuggingActionsCallbackInterface;
    private readonly InputAction m_Debugging_SelectObject;
    private readonly InputAction m_Debugging_MoveMouse;
    public struct DebuggingActions
    {
        private @PlayerControls m_Wrapper;
        public DebuggingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectObject => m_Wrapper.m_Debugging_SelectObject;
        public InputAction @MoveMouse => m_Wrapper.m_Debugging_MoveMouse;
        public InputActionMap Get() { return m_Wrapper.m_Debugging; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebuggingActions set) { return set.Get(); }
        public void SetCallbacks(IDebuggingActions instance)
        {
            if (m_Wrapper.m_DebuggingActionsCallbackInterface != null)
            {
                @SelectObject.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnSelectObject;
                @SelectObject.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnSelectObject;
                @SelectObject.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnSelectObject;
                @MoveMouse.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnMoveMouse;
                @MoveMouse.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnMoveMouse;
                @MoveMouse.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnMoveMouse;
            }
            m_Wrapper.m_DebuggingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SelectObject.started += instance.OnSelectObject;
                @SelectObject.performed += instance.OnSelectObject;
                @SelectObject.canceled += instance.OnSelectObject;
                @MoveMouse.started += instance.OnMoveMouse;
                @MoveMouse.performed += instance.OnMoveMouse;
                @MoveMouse.canceled += instance.OnMoveMouse;
            }
        }
    }
    public DebuggingActions @Debugging => new DebuggingActions(this);
    public interface IFishingActions
    {
        void OnLineBrake(InputAction.CallbackContext context);
        void OnRodtipMovement(InputAction.CallbackContext context);
        void OnReelMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IDebuggingActions
    {
        void OnSelectObject(InputAction.CallbackContext context);
        void OnMoveMouse(InputAction.CallbackContext context);
    }
}
